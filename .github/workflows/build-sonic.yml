name: Build SONiC for QFX5200
on:
  workflow_dispatch:

jobs:
  build-sonic:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout SONiC source
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Use a compatible Python version, e.g., 3.9, 3.10, 3.11

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y make gawk curl git-core \
            unzip libssl-dev libelf-dev \
            autoconf automake libtool xz-utils libxml2-utils \
            bc libpci-dev libnl-3-dev libnl-genl-3-dev \
            libdbus-1-dev iproute2 libcap-dev
          # Explicitly install jinja2-cli for the current user to ~/.local/bin
          PIP_USER=true pip install jinja2-cli

      - name: Set job-level PATH for Python user scripts
        run: |
          # Add the user-specific Python bin directory to the PATH for all subsequent steps.
          # This ensures executables installed with 'pip install --user' are found.
          echo "PATH=$(python3 -m site --user-base)/bin:$PATH" >> $GITHUB_ENV
          echo "Added $(python3 -m site --user-base)/bin to GITHUB_ENV PATH"

      - name: Debug j2 installation path
        run: |
          echo "--- pip list ---"
          pip list
          echo "--- pip freeze ---"
          pip freeze
          echo "--- Contents of ~/.local/bin ---"
          ls -la ~/.local/bin || echo "~/.local/bin not found or empty."
          echo "--- Python user base directory ---"
          python3 -m site --user-base
          echo "--- Current PATH ---"
          echo $PATH
          echo "--- Verify j2 command availability ---"
          which j2 || echo "j2 command not found in PATH."
          type j2 || echo "type j2 command not found."


      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Ensure user is in Docker group
        run: |
          # Add the current user to the docker group to allow running docker commands without sudo.
          # '|| true' prevents the step from failing if the user is already in the group.
          sudo usermod -aG docker $USER || true
          # 'newgrp docker' activates the new group membership for the current shell session.
          # This is crucial for the subsequent 'make' commands to recognize the new group.
          newgrp docker || true

      - name: Verify Docker access
        run: docker version

      - name: Prepare /var/cache/sonic directory
        run: |
          # Create the /var/cache/sonic directory and set permissions.
          # This addresses the 'Permission denied' error encountered during 'make configure'.
          # Using sudo here as it's a system-level directory creation that requires elevated privileges.
          sudo mkdir -p /var/cache/sonic
          sudo chmod 777 /var/cache/sonic # Setting broad permissions to ensure write access for the runner user

      - name: Debug Dockerfiles
        run: |
          echo "--- Contents of Dockerfile (if exists) ---"
          # Check if Dockerfile exists before trying to cat it
          if [ -f Dockerfile ]; then
            cat Dockerfile
          else
            echo "Dockerfile not found."
          fi
          echo "--- Contents of Dockerfile.cleanup (if exists) ---"
          # Check if Dockerfile.cleanup exists before trying to cat it
          if [ -f Dockerfile.cleanup ]; then
            cat Dockerfile.cleanup
          else
            echo "Dockerfile.cleanup not found or empty."
          fi
          echo "--- Listing files in current directory ---"
          ls -la

      - name: Initialize SONiC build
        run: |
          # Explicitly pass the PATH to the make command.
          make init
        env:
          PATH: ${{ env.PATH }}

      - name: Configure SONiC for QFX5200
        run: |
          # Explicitly pass the PATH to the make command.
          # 'sudo' was removed previously as per SONiC's requirement.
          make configure PLATFORM=juniper_qfx5200_32c
        env:
          PATH: ${{ env.PATH }}

      - name: Build SONiC
        run: |
          # Explicitly pass the PATH to the make command.
          make all
        env:
          PATH: ${{ env.PATH }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sonic-juniper-qfx5200
          path: |
            target/sonic-juniper_qfx5200_32c.bin
            target/sonic-juniper_qfx5200_32c.tar.gz
